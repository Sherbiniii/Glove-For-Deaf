
D.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ce  00800060  00000e36  00000eca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080012e  0080012e  00000f98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000fc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f5a  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb0  00000000  00000000  000031ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012e4  00000000  00000000  00003e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000054c  00000000  00000000  00005144  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a8f  00000000  00000000  00005690  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000122a  00000000  00000000  0000611f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00007349  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
   4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  18:	0c 94 38 05 	jmp	0xa70	; 0xa70 <__vector_6>
  1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  2c:	0c 94 13 05 	jmp	0xa26	; 0xa26 <__vector_11>
  30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_16>
  44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  54:	36 04       	cpc	r3, r6
  56:	3b 04       	cpc	r3, r11
  58:	40 04       	cpc	r4, r0
  5a:	45 04       	cpc	r4, r5
  5c:	4a 04       	cpc	r4, r10
  5e:	4f 04       	cpc	r4, r15
  60:	54 04       	cpc	r5, r4
  62:	59 04       	cpc	r5, r9
  64:	5e 04       	cpc	r5, r14
  66:	63 04       	cpc	r6, r3
  68:	68 04       	cpc	r6, r8
  6a:	6d 04       	cpc	r6, r13
  6c:	72 04       	cpc	r7, r2
  6e:	77 04       	cpc	r7, r7
  70:	7c 04       	cpc	r7, r12

00000072 <__ctors_end>:
  72:	11 24       	eor	r1, r1
  74:	1f be       	out	0x3f, r1	; 63
  76:	cf e5       	ldi	r28, 0x5F	; 95
  78:	d8 e0       	ldi	r29, 0x08	; 8
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
  7e:	11 e0       	ldi	r17, 0x01	; 1
  80:	a0 e6       	ldi	r26, 0x60	; 96
  82:	b0 e0       	ldi	r27, 0x00	; 0
  84:	e6 e3       	ldi	r30, 0x36	; 54
  86:	fe e0       	ldi	r31, 0x0E	; 14
  88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
  8a:	05 90       	lpm	r0, Z+
  8c:	0d 92       	st	X+, r0
  8e:	ae 32       	cpi	r26, 0x2E	; 46
  90:	b1 07       	cpc	r27, r17
  92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	ae e2       	ldi	r26, 0x2E	; 46
  98:	b1 e0       	ldi	r27, 0x01	; 1
  9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
  9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
  9e:	a2 34       	cpi	r26, 0x42	; 66
  a0:	b2 07       	cpc	r27, r18
  a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
  a4:	0e 94 9f 02 	call	0x53e	; 0x53e <main>
  a8:	0c 94 19 07 	jmp	0xe32	; 0xe32 <_exit>

000000ac <__bad_interrupt>:
  ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <ADC_voidInit>:
  b0:	87 b1       	in	r24, 0x07	; 7
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	87 b9       	out	0x07, r24	; 7
  b6:	87 b1       	in	r24, 0x07	; 7
  b8:	8f 77       	andi	r24, 0x7F	; 127
  ba:	87 b9       	out	0x07, r24	; 7
  bc:	87 b1       	in	r24, 0x07	; 7
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	87 b9       	out	0x07, r24	; 7
  c2:	86 b1       	in	r24, 0x06	; 6
  c4:	88 7f       	andi	r24, 0xF8	; 248
  c6:	86 b9       	out	0x06, r24	; 6
  c8:	86 b1       	in	r24, 0x06	; 6
  ca:	87 60       	ori	r24, 0x07	; 7
  cc:	86 b9       	out	0x06, r24	; 6
  ce:	86 b1       	in	r24, 0x06	; 6
  d0:	80 68       	ori	r24, 0x80	; 128
  d2:	86 b9       	out	0x06, r24	; 6
  d4:	08 95       	ret

000000d6 <ADC_u8StartConversionAsynch>:
  d6:	61 15       	cp	r22, r1
  d8:	71 05       	cpc	r23, r1
  da:	c9 f0       	breq	.+50     	; 0x10e <ADC_u8StartConversionAsynch+0x38>
  dc:	41 15       	cp	r20, r1
  de:	51 05       	cpc	r21, r1
  e0:	c1 f0       	breq	.+48     	; 0x112 <ADC_u8StartConversionAsynch+0x3c>
  e2:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <ADC_pu16ResultValue+0x1>
  e6:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <ADC_pu16ResultValue>
  ea:	50 93 2f 01 	sts	0x012F, r21	; 0x80012f <__data_end+0x1>
  ee:	40 93 2e 01 	sts	0x012E, r20	; 0x80012e <__data_end>
  f2:	97 b1       	in	r25, 0x07	; 7
  f4:	90 7e       	andi	r25, 0xE0	; 224
  f6:	97 b9       	out	0x07, r25	; 7
  f8:	97 b1       	in	r25, 0x07	; 7
  fa:	89 2b       	or	r24, r25
  fc:	87 b9       	out	0x07, r24	; 7
  fe:	86 b1       	in	r24, 0x06	; 6
 100:	80 64       	ori	r24, 0x40	; 64
 102:	86 b9       	out	0x06, r24	; 6
 104:	86 b1       	in	r24, 0x06	; 6
 106:	88 60       	ori	r24, 0x08	; 8
 108:	86 b9       	out	0x06, r24	; 6
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	08 95       	ret
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	08 95       	ret
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	08 95       	ret

00000116 <__vector_16>:
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	3f 93       	push	r19
 124:	4f 93       	push	r20
 126:	5f 93       	push	r21
 128:	6f 93       	push	r22
 12a:	7f 93       	push	r23
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	af 93       	push	r26
 132:	bf 93       	push	r27
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
 138:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <ADC_pu16ResultValue>
 13c:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <ADC_pu16ResultValue+0x1>
 140:	85 b1       	in	r24, 0x05	; 5
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	91 83       	std	Z+1, r25	; 0x01
 146:	80 83       	st	Z, r24
 148:	86 b1       	in	r24, 0x06	; 6
 14a:	87 7f       	andi	r24, 0xF7	; 247
 14c:	86 b9       	out	0x06, r24	; 6
 14e:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <__data_end>
 152:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <__data_end+0x1>
 156:	30 97       	sbiw	r30, 0x00	; 0
 158:	09 f0       	breq	.+2      	; 0x15c <__vector_16+0x46>
 15a:	09 95       	icall
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <DIO_u8SetPinValue>:
 17e:	68 30       	cpi	r22, 0x08	; 8
 180:	08 f0       	brcs	.+2      	; 0x184 <DIO_u8SetPinValue+0x6>
 182:	78 c0       	rjmp	.+240    	; 0x274 <DIO_u8SetPinValue+0xf6>
 184:	41 30       	cpi	r20, 0x01	; 1
 186:	c1 f5       	brne	.+112    	; 0x1f8 <DIO_u8SetPinValue+0x7a>
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	91 f0       	breq	.+36     	; 0x1b0 <DIO_u8SetPinValue+0x32>
 18c:	28 f0       	brcs	.+10     	; 0x198 <DIO_u8SetPinValue+0x1a>
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	d9 f0       	breq	.+54     	; 0x1c8 <DIO_u8SetPinValue+0x4a>
 192:	83 30       	cpi	r24, 0x03	; 3
 194:	29 f1       	breq	.+74     	; 0x1e0 <DIO_u8SetPinValue+0x62>
 196:	70 c0       	rjmp	.+224    	; 0x278 <DIO_u8SetPinValue+0xfa>
 198:	2b b3       	in	r18, 0x1b	; 27
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_u8SetPinValue+0x26>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_u8SetPinValue+0x22>
 1a8:	82 2b       	or	r24, r18
 1aa:	8b bb       	out	0x1b, r24	; 27
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	08 95       	ret
 1b0:	28 b3       	in	r18, 0x18	; 24
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_u8SetPinValue+0x3e>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_u8SetPinValue+0x3a>
 1c0:	82 2b       	or	r24, r18
 1c2:	88 bb       	out	0x18, r24	; 24
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	08 95       	ret
 1c8:	25 b3       	in	r18, 0x15	; 21
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_u8SetPinValue+0x56>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_u8SetPinValue+0x52>
 1d8:	82 2b       	or	r24, r18
 1da:	85 bb       	out	0x15, r24	; 21
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	08 95       	ret
 1e0:	22 b3       	in	r18, 0x12	; 18
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_u8SetPinValue+0x6e>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_u8SetPinValue+0x6a>
 1f0:	82 2b       	or	r24, r18
 1f2:	82 bb       	out	0x12, r24	; 18
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	08 95       	ret
 1f8:	41 11       	cpse	r20, r1
 1fa:	40 c0       	rjmp	.+128    	; 0x27c <DIO_u8SetPinValue+0xfe>
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	99 f0       	breq	.+38     	; 0x226 <DIO_u8SetPinValue+0xa8>
 200:	28 f0       	brcs	.+10     	; 0x20c <DIO_u8SetPinValue+0x8e>
 202:	82 30       	cpi	r24, 0x02	; 2
 204:	e9 f0       	breq	.+58     	; 0x240 <DIO_u8SetPinValue+0xc2>
 206:	83 30       	cpi	r24, 0x03	; 3
 208:	41 f1       	breq	.+80     	; 0x25a <DIO_u8SetPinValue+0xdc>
 20a:	3a c0       	rjmp	.+116    	; 0x280 <DIO_u8SetPinValue+0x102>
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_u8SetPinValue+0x9a>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_u8SetPinValue+0x96>
 21c:	80 95       	com	r24
 21e:	82 23       	and	r24, r18
 220:	8b bb       	out	0x1b, r24	; 27
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	08 95       	ret
 226:	28 b3       	in	r18, 0x18	; 24
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_u8SetPinValue+0xb4>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_u8SetPinValue+0xb0>
 236:	80 95       	com	r24
 238:	82 23       	and	r24, r18
 23a:	88 bb       	out	0x18, r24	; 24
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	08 95       	ret
 240:	25 b3       	in	r18, 0x15	; 21
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_u8SetPinValue+0xce>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_u8SetPinValue+0xca>
 250:	80 95       	com	r24
 252:	82 23       	and	r24, r18
 254:	85 bb       	out	0x15, r24	; 21
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	08 95       	ret
 25a:	22 b3       	in	r18, 0x12	; 18
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_u8SetPinValue+0xe8>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_u8SetPinValue+0xe4>
 26a:	80 95       	com	r24
 26c:	82 23       	and	r24, r18
 26e:	82 bb       	out	0x12, r24	; 18
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	08 95       	ret
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	08 95       	ret
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	08 95       	ret
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	08 95       	ret
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	08 95       	ret

00000284 <DIO_u8SetPortDirection>:
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	49 f0       	breq	.+18     	; 0x29a <DIO_u8SetPortDirection+0x16>
 288:	28 f0       	brcs	.+10     	; 0x294 <DIO_u8SetPortDirection+0x10>
 28a:	82 30       	cpi	r24, 0x02	; 2
 28c:	49 f0       	breq	.+18     	; 0x2a0 <DIO_u8SetPortDirection+0x1c>
 28e:	83 30       	cpi	r24, 0x03	; 3
 290:	51 f0       	breq	.+20     	; 0x2a6 <DIO_u8SetPortDirection+0x22>
 292:	0c c0       	rjmp	.+24     	; 0x2ac <DIO_u8SetPortDirection+0x28>
 294:	6a bb       	out	0x1a, r22	; 26
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	08 95       	ret
 29a:	67 bb       	out	0x17, r22	; 23
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	08 95       	ret
 2a0:	64 bb       	out	0x14, r22	; 20
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	08 95       	ret
 2a6:	61 bb       	out	0x11, r22	; 17
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	08 95       	ret
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	08 95       	ret

000002b0 <DIO_u8SetPortValue>:
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	49 f0       	breq	.+18     	; 0x2c6 <DIO_u8SetPortValue+0x16>
 2b4:	28 f0       	brcs	.+10     	; 0x2c0 <DIO_u8SetPortValue+0x10>
 2b6:	82 30       	cpi	r24, 0x02	; 2
 2b8:	49 f0       	breq	.+18     	; 0x2cc <DIO_u8SetPortValue+0x1c>
 2ba:	83 30       	cpi	r24, 0x03	; 3
 2bc:	51 f0       	breq	.+20     	; 0x2d2 <DIO_u8SetPortValue+0x22>
 2be:	0c c0       	rjmp	.+24     	; 0x2d8 <DIO_u8SetPortValue+0x28>
 2c0:	6b bb       	out	0x1b, r22	; 27
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	08 95       	ret
 2c6:	68 bb       	out	0x18, r22	; 24
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	08 95       	ret
 2cc:	65 bb       	out	0x15, r22	; 21
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	08 95       	ret
 2d2:	62 bb       	out	0x12, r22	; 18
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	08 95       	ret
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	08 95       	ret

000002dc <DIO_u8GetPinValue>:
 2dc:	68 30       	cpi	r22, 0x08	; 8
 2de:	c0 f5       	brcc	.+112    	; 0x350 <DIO_u8GetPinValue+0x74>
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	91 f0       	breq	.+36     	; 0x308 <DIO_u8GetPinValue+0x2c>
 2e4:	28 f0       	brcs	.+10     	; 0x2f0 <DIO_u8GetPinValue+0x14>
 2e6:	82 30       	cpi	r24, 0x02	; 2
 2e8:	d9 f0       	breq	.+54     	; 0x320 <DIO_u8GetPinValue+0x44>
 2ea:	83 30       	cpi	r24, 0x03	; 3
 2ec:	29 f1       	breq	.+74     	; 0x338 <DIO_u8GetPinValue+0x5c>
 2ee:	32 c0       	rjmp	.+100    	; 0x354 <DIO_u8GetPinValue+0x78>
 2f0:	89 b3       	in	r24, 0x19	; 25
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_u8GetPinValue+0x1e>
 2f6:	95 95       	asr	r25
 2f8:	87 95       	ror	r24
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_u8GetPinValue+0x1a>
 2fe:	81 70       	andi	r24, 0x01	; 1
 300:	fa 01       	movw	r30, r20
 302:	80 83       	st	Z, r24
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	08 95       	ret
 308:	86 b3       	in	r24, 0x16	; 22
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_u8GetPinValue+0x36>
 30e:	95 95       	asr	r25
 310:	87 95       	ror	r24
 312:	6a 95       	dec	r22
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_u8GetPinValue+0x32>
 316:	81 70       	andi	r24, 0x01	; 1
 318:	fa 01       	movw	r30, r20
 31a:	80 83       	st	Z, r24
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	08 95       	ret
 320:	83 b3       	in	r24, 0x13	; 19
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_u8GetPinValue+0x4e>
 326:	95 95       	asr	r25
 328:	87 95       	ror	r24
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_u8GetPinValue+0x4a>
 32e:	81 70       	andi	r24, 0x01	; 1
 330:	fa 01       	movw	r30, r20
 332:	80 83       	st	Z, r24
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	08 95       	ret
 338:	80 b3       	in	r24, 0x10	; 16
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_u8GetPinValue+0x66>
 33e:	95 95       	asr	r25
 340:	87 95       	ror	r24
 342:	6a 95       	dec	r22
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_u8GetPinValue+0x62>
 346:	81 70       	andi	r24, 0x01	; 1
 348:	fa 01       	movw	r30, r20
 34a:	80 83       	st	Z, r24
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	08 95       	ret
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	08 95       	ret
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	08 95       	ret

00000358 <EEPROM_voidSendData>:
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	d8 2f       	mov	r29, r24
 360:	c6 2f       	mov	r28, r22
 362:	19 2f       	mov	r17, r25
 364:	10 65       	ori	r17, 0x50	; 80
 366:	0e 94 88 05 	call	0xb10	; 0xb10 <TWI_sendStartCondition>
 36a:	81 2f       	mov	r24, r17
 36c:	0e 94 ab 05 	call	0xb56	; 0xb56 <TWI_sendSlaveAddwithWrite>
 370:	8d 2f       	mov	r24, r29
 372:	0e 94 d1 05 	call	0xba2	; 0xba2 <TWI_sendMasterDataByte>
 376:	8c 2f       	mov	r24, r28
 378:	0e 94 d1 05 	call	0xba2	; 0xba2 <TWI_sendMasterDataByte>
 37c:	0e 94 a4 05 	call	0xb48	; 0xb48 <TWI_sendStopCondition>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 380:	8f e1       	ldi	r24, 0x1F	; 31
 382:	9e e4       	ldi	r25, 0x4E	; 78
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <EEPROM_voidSendData+0x2c>
 388:	00 c0       	rjmp	.+0      	; 0x38a <EEPROM_voidSendData+0x32>
 38a:	00 00       	nop
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	1f 91       	pop	r17
 392:	08 95       	ret

00000394 <EEPROM_voidReadData>:
 394:	0f 93       	push	r16
 396:	1f 93       	push	r17
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	d8 2f       	mov	r29, r24
 39e:	8b 01       	movw	r16, r22
 3a0:	c9 2f       	mov	r28, r25
 3a2:	c0 65       	ori	r28, 0x50	; 80
 3a4:	0e 94 88 05 	call	0xb10	; 0xb10 <TWI_sendStartCondition>
 3a8:	8c 2f       	mov	r24, r28
 3aa:	0e 94 ab 05 	call	0xb56	; 0xb56 <TWI_sendSlaveAddwithWrite>
 3ae:	8d 2f       	mov	r24, r29
 3b0:	0e 94 d1 05 	call	0xba2	; 0xba2 <TWI_sendMasterDataByte>
 3b4:	0e 94 96 05 	call	0xb2c	; 0xb2c <TWI_sendRepStartCondition>
 3b8:	8c 2f       	mov	r24, r28
 3ba:	0e 94 be 05 	call	0xb7c	; 0xb7c <TWI_sendSlaveAddwithRead>
 3be:	c8 01       	movw	r24, r16
 3c0:	0e 94 dd 05 	call	0xbba	; 0xbba <TWI_readMasterDataByte>
 3c4:	0e 94 a4 05 	call	0xb48	; 0xb48 <TWI_sendStopCondition>
 3c8:	8f e1       	ldi	r24, 0x1F	; 31
 3ca:	9e e4       	ldi	r25, 0x4E	; 78
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <EEPROM_voidReadData+0x38>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <EEPROM_voidReadData+0x3e>
 3d2:	00 00       	nop
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	1f 91       	pop	r17
 3da:	0f 91       	pop	r16
 3dc:	08 95       	ret

000003de <GIE_voidEnable>:
 3de:	8f b7       	in	r24, 0x3f	; 63
 3e0:	80 68       	ori	r24, 0x80	; 128
 3e2:	8f bf       	out	0x3f, r24	; 63
 3e4:	08 95       	ret

000003e6 <Static_LCD_HalfPortSend>:
 3e6:	cf 93       	push	r28
 3e8:	c8 2f       	mov	r28, r24
 3ea:	48 2f       	mov	r20, r24
 3ec:	41 70       	andi	r20, 0x01	; 1
 3ee:	64 e0       	ldi	r22, 0x04	; 4
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_u8SetPinValue>
 3f6:	c1 fb       	bst	r28, 1
 3f8:	44 27       	eor	r20, r20
 3fa:	40 f9       	bld	r20, 0
 3fc:	65 e0       	ldi	r22, 0x05	; 5
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_u8SetPinValue>
 404:	c2 fb       	bst	r28, 2
 406:	44 27       	eor	r20, r20
 408:	40 f9       	bld	r20, 0
 40a:	66 e0       	ldi	r22, 0x06	; 6
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_u8SetPinValue>
 412:	c3 fb       	bst	r28, 3
 414:	44 27       	eor	r20, r20
 416:	40 f9       	bld	r20, 0
 418:	67 e0       	ldi	r22, 0x07	; 7
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_u8SetPinValue>
 420:	cf 91       	pop	r28
 422:	08 95       	ret

00000424 <EnablePulse>:
 424:	41 e0       	ldi	r20, 0x01	; 1
 426:	63 e0       	ldi	r22, 0x03	; 3
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_u8SetPinValue>
 42e:	8f e3       	ldi	r24, 0x3F	; 63
 430:	9f e1       	ldi	r25, 0x1F	; 31
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <EnablePulse+0xe>
 436:	00 c0       	rjmp	.+0      	; 0x438 <EnablePulse+0x14>
 438:	00 00       	nop
 43a:	40 e0       	ldi	r20, 0x00	; 0
 43c:	63 e0       	ldi	r22, 0x03	; 3
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_u8SetPinValue>
 444:	08 95       	ret

00000446 <LCD_voidSendCommand>:
 446:	cf 93       	push	r28
 448:	c8 2f       	mov	r28, r24
 44a:	40 e0       	ldi	r20, 0x00	; 0
 44c:	61 e0       	ldi	r22, 0x01	; 1
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_u8SetPinValue>
 454:	40 e0       	ldi	r20, 0x00	; 0
 456:	62 e0       	ldi	r22, 0x02	; 2
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_u8SetPinValue>
 45e:	8c 2f       	mov	r24, r28
 460:	82 95       	swap	r24
 462:	8f 70       	andi	r24, 0x0F	; 15
 464:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Static_LCD_HalfPortSend>
 468:	0e 94 12 02 	call	0x424	; 0x424 <EnablePulse>
 46c:	8c 2f       	mov	r24, r28
 46e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Static_LCD_HalfPortSend>
 472:	0e 94 12 02 	call	0x424	; 0x424 <EnablePulse>
 476:	cf 91       	pop	r28
 478:	08 95       	ret

0000047a <LCD_voidSendData>:
 47a:	cf 93       	push	r28
 47c:	c8 2f       	mov	r28, r24
 47e:	41 e0       	ldi	r20, 0x01	; 1
 480:	61 e0       	ldi	r22, 0x01	; 1
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_u8SetPinValue>
 488:	40 e0       	ldi	r20, 0x00	; 0
 48a:	62 e0       	ldi	r22, 0x02	; 2
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_u8SetPinValue>
 492:	8c 2f       	mov	r24, r28
 494:	82 95       	swap	r24
 496:	8f 70       	andi	r24, 0x0F	; 15
 498:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Static_LCD_HalfPortSend>
 49c:	0e 94 12 02 	call	0x424	; 0x424 <EnablePulse>
 4a0:	8c 2f       	mov	r24, r28
 4a2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Static_LCD_HalfPortSend>
 4a6:	0e 94 12 02 	call	0x424	; 0x424 <EnablePulse>
 4aa:	cf 91       	pop	r28
 4ac:	08 95       	ret

000004ae <LCD_voidInit>:
 4ae:	2f ef       	ldi	r18, 0xFF	; 255
 4b0:	83 ef       	ldi	r24, 0xF3	; 243
 4b2:	91 e0       	ldi	r25, 0x01	; 1
 4b4:	21 50       	subi	r18, 0x01	; 1
 4b6:	80 40       	sbci	r24, 0x00	; 0
 4b8:	90 40       	sbci	r25, 0x00	; 0
 4ba:	e1 f7       	brne	.-8      	; 0x4b4 <LCD_voidInit+0x6>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <LCD_voidInit+0x10>
 4be:	00 00       	nop
 4c0:	82 e0       	ldi	r24, 0x02	; 2
 4c2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Static_LCD_HalfPortSend>
 4c6:	0e 94 12 02 	call	0x424	; 0x424 <EnablePulse>
 4ca:	82 e0       	ldi	r24, 0x02	; 2
 4cc:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Static_LCD_HalfPortSend>
 4d0:	0e 94 12 02 	call	0x424	; 0x424 <EnablePulse>
 4d4:	88 e0       	ldi	r24, 0x08	; 8
 4d6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Static_LCD_HalfPortSend>
 4da:	0e 94 12 02 	call	0x424	; 0x424 <EnablePulse>
 4de:	8c e0       	ldi	r24, 0x0C	; 12
 4e0:	0e 94 23 02 	call	0x446	; 0x446 <LCD_voidSendCommand>
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	0e 94 23 02 	call	0x446	; 0x446 <LCD_voidSendCommand>
 4ea:	08 95       	ret

000004ec <LCD_u8SendString>:
 4ec:	0f 93       	push	r16
 4ee:	1f 93       	push	r17
 4f0:	cf 93       	push	r28
 4f2:	00 97       	sbiw	r24, 0x00	; 0
 4f4:	29 f4       	brne	.+10     	; 0x500 <LCD_u8SendString+0x14>
 4f6:	0c c0       	rjmp	.+24     	; 0x510 <LCD_u8SendString+0x24>
 4f8:	0e 94 3d 02 	call	0x47a	; 0x47a <LCD_voidSendData>
 4fc:	cf 5f       	subi	r28, 0xFF	; 255
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <LCD_u8SendString+0x18>
 500:	8c 01       	movw	r16, r24
 502:	c0 e0       	ldi	r28, 0x00	; 0
 504:	f8 01       	movw	r30, r16
 506:	ec 0f       	add	r30, r28
 508:	f1 1d       	adc	r31, r1
 50a:	80 81       	ld	r24, Z
 50c:	81 11       	cpse	r24, r1
 50e:	f4 cf       	rjmp	.-24     	; 0x4f8 <LCD_u8SendString+0xc>
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	cf 91       	pop	r28
 514:	1f 91       	pop	r17
 516:	0f 91       	pop	r16
 518:	08 95       	ret

0000051a <LCD_u8SetPos>:
 51a:	cf 93       	push	r28
 51c:	66 23       	and	r22, r22
 51e:	41 f0       	breq	.+16     	; 0x530 <LCD_u8SetPos+0x16>
 520:	61 30       	cpi	r22, 0x01	; 1
 522:	19 f0       	breq	.+6      	; 0x52a <LCD_u8SetPos+0x10>
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	c0 e0       	ldi	r28, 0x00	; 0
 528:	04 c0       	rjmp	.+8      	; 0x532 <LCD_u8SetPos+0x18>
 52a:	80 5c       	subi	r24, 0xC0	; 192
 52c:	c1 e0       	ldi	r28, 0x01	; 1
 52e:	01 c0       	rjmp	.+2      	; 0x532 <LCD_u8SetPos+0x18>
 530:	c1 e0       	ldi	r28, 0x01	; 1
 532:	80 68       	ori	r24, 0x80	; 128
 534:	0e 94 23 02 	call	0x446	; 0x446 <LCD_voidSendCommand>
 538:	8c 2f       	mov	r24, r28
 53a:	cf 91       	pop	r28
 53c:	08 95       	ret

0000053e <main>:
#include "TWI_interface.h"
#include "Pro.h"

int main(void)
{
	DIO_u8SetPortDirection(DIO_PORTB,DIO_PORT_OUTPUT); //setting the LCD PORT as output
 53e:	6f ef       	ldi	r22, 0xFF	; 255
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	0e 94 42 01 	call	0x284	; 0x284 <DIO_u8SetPortDirection>
	LCD_voidInit(); // initializing LCD 2 lines, 5*7 , disp on
 546:	0e 94 57 02 	call	0x4ae	; 0x4ae <LCD_voidInit>
	
	DIO_u8SetPortDirection(DIO_PORTA,DIO_PORT_INPUT); //setting the ADC PORT as input
 54a:	60 e0       	ldi	r22, 0x00	; 0
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	0e 94 42 01 	call	0x284	; 0x284 <DIO_u8SetPortDirection>
	DIO_u8SetPortDirection(DIO_PORTD,DIO_PORT_INPUT); // setting the switches port as input
 552:	60 e0       	ldi	r22, 0x00	; 0
 554:	83 e0       	ldi	r24, 0x03	; 3
 556:	0e 94 42 01 	call	0x284	; 0x284 <DIO_u8SetPortDirection>
	DIO_u8SetPortValue(DIO_PORTD,DIO_PORT_HIGH); // setting it as pull up resistor mode
 55a:	6f ef       	ldi	r22, 0xFF	; 255
 55c:	83 e0       	ldi	r24, 0x03	; 3
 55e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_u8SetPortValue>
	
	GIE_voidEnable(); // enabling GIE to allow interrupts 
 562:	0e 94 ef 01 	call	0x3de	; 0x3de <GIE_voidEnable>
	ADC_voidInit();  // initializing ADC
 566:	0e 94 58 00 	call	0xb0	; 0xb0 <ADC_voidInit>
	TWI_initMaster(); // initializing TWI in master mode
 56a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <TWI_initMaster>
	TIMER0_voidInit(); // initializing TIMER in CTC mode
 56e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <TIMER0_voidInit>

	EEPROM_SaveStates(); // sending the 15 words to EEPROM to store it
 572:	0e 94 41 03 	call	0x682	; 0x682 <EEPROM_SaveStates>
	while (1)
	{
		ADC_Operations(); // getting reading from sensors through ADC and comparing it with the stored data to output words on LCD
 576:	0e 94 90 04 	call	0x920	; 0x920 <ADC_Operations>
 57a:	fd cf       	rjmp	.-6      	; 0x576 <main+0x38>

0000057c <Flex_App>:
	}
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
}
void Flex_App()
{
	f32 Local_ADC_f32ResultA =(f32)Global_ADC_u16ResultD*5/256; // converting digital value to float analog value
 57c:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <Global_ADC_u16ResultD>
 580:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <Global_ADC_u16ResultD+0x1>
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	0e 94 18 06 	call	0xc30	; 0xc30 <__floatunsisf>
 58c:	20 e0       	ldi	r18, 0x00	; 0
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	40 ea       	ldi	r20, 0xA0	; 160
 592:	50 e4       	ldi	r21, 0x40	; 64
 594:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__mulsf3>
 598:	20 e0       	ldi	r18, 0x00	; 0
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	40 e8       	ldi	r20, 0x80	; 128
 59e:	5b e3       	ldi	r21, 0x3B	; 59
 5a0:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__mulsf3>

	switch((u8)Local_ADC_f32ResultA) //switch case to specify the current partition state of each finger (0 = straight,1 = partially closed,2 = fully closed)
 5a4:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__fixunssfsi>
 5a8:	64 30       	cpi	r22, 0x04	; 4
 5aa:	18 f4       	brcc	.+6      	; 0x5b2 <Flex_App+0x36>
 5ac:	61 30       	cpi	r22, 0x01	; 1
 5ae:	28 f0       	brcs	.+10     	; 0x5ba <Flex_App+0x3e>
 5b0:	22 c0       	rjmp	.+68     	; 0x5f6 <Flex_App+0x7a>
 5b2:	64 30       	cpi	r22, 0x04	; 4
 5b4:	09 f4       	brne	.+2      	; 0x5b8 <Flex_App+0x3c>
 5b6:	42 c0       	rjmp	.+132    	; 0x63c <Flex_App+0xc0>
 5b8:	08 95       	ret
	{
		case 0:
		switch(Global_u8Counter) //switch on counter to specify the finger 
 5ba:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <Global_u8Counter>
 5be:	82 30       	cpi	r24, 0x02	; 2
 5c0:	89 f0       	breq	.+34     	; 0x5e4 <Flex_App+0x68>
 5c2:	28 f4       	brcc	.+10     	; 0x5ce <Flex_App+0x52>
 5c4:	88 23       	and	r24, r24
 5c6:	41 f0       	breq	.+16     	; 0x5d8 <Flex_App+0x5c>
 5c8:	81 30       	cpi	r24, 0x01	; 1
 5ca:	49 f0       	breq	.+18     	; 0x5de <Flex_App+0x62>
 5cc:	08 95       	ret
 5ce:	83 30       	cpi	r24, 0x03	; 3
 5d0:	61 f0       	breq	.+24     	; 0x5ea <Flex_App+0x6e>
 5d2:	84 30       	cpi	r24, 0x04	; 4
 5d4:	69 f0       	breq	.+26     	; 0x5f0 <Flex_App+0x74>
 5d6:	08 95       	ret
		{
			case 0: F1.Partition=0; break;
 5d8:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <F1>
 5dc:	08 95       	ret
			case 1: F2.Partition=0; break;
 5de:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <F2>
 5e2:	08 95       	ret
			case 2:	F3.Partition=0; break;
 5e4:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <F3>
 5e8:	08 95       	ret
			case 3: F4.Partition=0; break;
 5ea:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <F4>
 5ee:	08 95       	ret
			case 4: F5.Partition=0; break;
 5f0:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <F5>
 5f4:	08 95       	ret
		}break;
		case 2:
		case 3:
		case 1:
		switch(Global_u8Counter)
 5f6:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <Global_u8Counter>
 5fa:	82 30       	cpi	r24, 0x02	; 2
 5fc:	99 f0       	breq	.+38     	; 0x624 <Flex_App+0xa8>
 5fe:	28 f4       	brcc	.+10     	; 0x60a <Flex_App+0x8e>
 600:	88 23       	and	r24, r24
 602:	41 f0       	breq	.+16     	; 0x614 <Flex_App+0x98>
 604:	81 30       	cpi	r24, 0x01	; 1
 606:	51 f0       	breq	.+20     	; 0x61c <Flex_App+0xa0>
 608:	08 95       	ret
 60a:	83 30       	cpi	r24, 0x03	; 3
 60c:	79 f0       	breq	.+30     	; 0x62c <Flex_App+0xb0>
 60e:	84 30       	cpi	r24, 0x04	; 4
 610:	89 f0       	breq	.+34     	; 0x634 <Flex_App+0xb8>
 612:	08 95       	ret
		{
			case 0: F1.Partition=1; break;
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <F1>
 61a:	08 95       	ret
			case 1: F2.Partition=1; break;
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <F2>
 622:	08 95       	ret
			case 2:	F3.Partition=1; break;
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <F3>
 62a:	08 95       	ret
			case 3: F4.Partition=1; break;
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <F4>
 632:	08 95       	ret
			case 4: F5.Partition=1; break;
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <F5>
 63a:	08 95       	ret
		}break;
		
		case 4:
		switch(Global_u8Counter)
 63c:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <Global_u8Counter>
 640:	82 30       	cpi	r24, 0x02	; 2
 642:	99 f0       	breq	.+38     	; 0x66a <Flex_App+0xee>
 644:	28 f4       	brcc	.+10     	; 0x650 <Flex_App+0xd4>
 646:	88 23       	and	r24, r24
 648:	41 f0       	breq	.+16     	; 0x65a <Flex_App+0xde>
 64a:	81 30       	cpi	r24, 0x01	; 1
 64c:	51 f0       	breq	.+20     	; 0x662 <Flex_App+0xe6>
 64e:	08 95       	ret
 650:	83 30       	cpi	r24, 0x03	; 3
 652:	79 f0       	breq	.+30     	; 0x672 <Flex_App+0xf6>
 654:	84 30       	cpi	r24, 0x04	; 4
 656:	89 f0       	breq	.+34     	; 0x67a <Flex_App+0xfe>
 658:	08 95       	ret
		{
			case 0: F1.Partition=2; break;
 65a:	82 e0       	ldi	r24, 0x02	; 2
 65c:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <F1>
 660:	08 95       	ret
			case 1: F2.Partition=2; break;
 662:	82 e0       	ldi	r24, 0x02	; 2
 664:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <F2>
 668:	08 95       	ret
			case 2:	F3.Partition=2; break;
 66a:	82 e0       	ldi	r24, 0x02	; 2
 66c:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <F3>
 670:	08 95       	ret
			case 3: F4.Partition=2; break;
 672:	82 e0       	ldi	r24, 0x02	; 2
 674:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <F4>
 678:	08 95       	ret
			case 4: F5.Partition=2; break;
 67a:	82 e0       	ldi	r24, 0x02	; 2
 67c:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <F5>
 680:	08 95       	ret

00000682 <EEPROM_SaveStates>:

	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	LCD_Printing(); // fn comparing current states with stored states to print on lcd
}
void EEPROM_SaveStates(void)
{
 682:	ef 92       	push	r14
 684:	ff 92       	push	r15
 686:	0f 93       	push	r16
 688:	1f 93       	push	r17
 68a:	cf 93       	push	r28
 68c:	df 93       	push	r29
 68e:	cd b7       	in	r28, 0x3d	; 61
 690:	de b7       	in	r29, 0x3e	; 62
 692:	6e 97       	sbiw	r28, 0x1e	; 30
 694:	0f b6       	in	r0, 0x3f	; 63
 696:	f8 94       	cli
 698:	de bf       	out	0x3e, r29	; 62
 69a:	0f be       	out	0x3f, r0	; 63
 69c:	cd bf       	out	0x3d, r28	; 61
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	u16 Local_u16States[15] = {0b0000000010100010,0b0000000010100000,0b0010000010000000,0b0001101010010110,0b1000001010100010,0b1000001010101000,0b0111100000000000,0b0000000000000000,0b0000000010000000,0b0000000000000101,0b0000001010000010,0b0001101010000010,0b0000001010101010,0b0000001010100101,0b0001101010000010}; //Array of 15 states to send it to EEPROM
 69e:	8e e1       	ldi	r24, 0x1E	; 30
 6a0:	e0 e6       	ldi	r30, 0x60	; 96
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	de 01       	movw	r26, r28
 6a6:	11 96       	adiw	r26, 0x01	; 1
 6a8:	01 90       	ld	r0, Z+
 6aa:	0d 92       	st	X+, r0
 6ac:	8a 95       	dec	r24
 6ae:	e1 f7       	brne	.-8      	; 0x6a8 <EEPROM_SaveStates+0x26>
	u8 Local_u8LoopCounter=0; 
 6b0:	f1 2c       	mov	r15, r1
	u16 Local_u8BaseAddress=0b10000000000;//setting EEPROM base address and start writing from 0 address
	for(Local_u8LoopCounter;Local_u8LoopCounter<15;Local_u8LoopCounter++) // storing states in EEPROM byte by byte
 6b2:	17 c0       	rjmp	.+46     	; 0x6e2 <EEPROM_SaveStates+0x60>
	{
		EEPROM_voidSendData(Local_u8BaseAddress+(Local_u8LoopCounter*2),(u8)Local_u16States[Local_u8LoopCounter]);
 6b4:	0f 2d       	mov	r16, r15
 6b6:	10 e0       	ldi	r17, 0x00	; 0
 6b8:	00 0f       	add	r16, r16
 6ba:	11 1f       	adc	r17, r17
 6bc:	e1 e0       	ldi	r30, 0x01	; 1
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	ec 0f       	add	r30, r28
 6c2:	fd 1f       	adc	r31, r29
 6c4:	e0 0f       	add	r30, r16
 6c6:	f1 1f       	adc	r31, r17
 6c8:	60 81       	ld	r22, Z
 6ca:	e1 80       	ldd	r14, Z+1	; 0x01
 6cc:	c8 01       	movw	r24, r16
 6ce:	9c 5f       	subi	r25, 0xFC	; 252
 6d0:	0e 94 ac 01 	call	0x358	; 0x358 <EEPROM_voidSendData>
		EEPROM_voidSendData(Local_u8BaseAddress+(Local_u8LoopCounter*2)+1,(u8)((Local_u16States[Local_u8LoopCounter])>>8));
 6d4:	6e 2d       	mov	r22, r14
 6d6:	c8 01       	movw	r24, r16
 6d8:	8f 5f       	subi	r24, 0xFF	; 255
 6da:	9b 4f       	sbci	r25, 0xFB	; 251
 6dc:	0e 94 ac 01 	call	0x358	; 0x358 <EEPROM_voidSendData>
{
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	u16 Local_u16States[15] = {0b0000000010100010,0b0000000010100000,0b0010000010000000,0b0001101010010110,0b1000001010100010,0b1000001010101000,0b0111100000000000,0b0000000000000000,0b0000000010000000,0b0000000000000101,0b0000001010000010,0b0001101010000010,0b0000001010101010,0b0000001010100101,0b0001101010000010}; //Array of 15 states to send it to EEPROM
	u8 Local_u8LoopCounter=0; 
	u16 Local_u8BaseAddress=0b10000000000;//setting EEPROM base address and start writing from 0 address
	for(Local_u8LoopCounter;Local_u8LoopCounter<15;Local_u8LoopCounter++) // storing states in EEPROM byte by byte
 6e0:	f3 94       	inc	r15
 6e2:	8e e0       	ldi	r24, 0x0E	; 14
 6e4:	8f 15       	cp	r24, r15
 6e6:	30 f7       	brcc	.-52     	; 0x6b4 <EEPROM_SaveStates+0x32>
	{
		EEPROM_voidSendData(Local_u8BaseAddress+(Local_u8LoopCounter*2),(u8)Local_u16States[Local_u8LoopCounter]);
		EEPROM_voidSendData(Local_u8BaseAddress+(Local_u8LoopCounter*2)+1,(u8)((Local_u16States[Local_u8LoopCounter])>>8));
	}
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
}
 6e8:	6e 96       	adiw	r28, 0x1e	; 30
 6ea:	0f b6       	in	r0, 0x3f	; 63
 6ec:	f8 94       	cli
 6ee:	de bf       	out	0x3e, r29	; 62
 6f0:	0f be       	out	0x3f, r0	; 63
 6f2:	cd bf       	out	0x3d, r28	; 61
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	1f 91       	pop	r17
 6fa:	0f 91       	pop	r16
 6fc:	ff 90       	pop	r15
 6fe:	ef 90       	pop	r14
 700:	08 95       	ret

00000702 <LCD_Printing>:
		}break;
		default:break;
	}
}
void LCD_Printing(void)
{
 702:	bf 92       	push	r11
 704:	cf 92       	push	r12
 706:	df 92       	push	r13
 708:	ef 92       	push	r14
 70a:	ff 92       	push	r15
 70c:	0f 93       	push	r16
 70e:	1f 93       	push	r17
 710:	cf 93       	push	r28
 712:	df 93       	push	r29
 714:	1f 92       	push	r1
 716:	cd b7       	in	r28, 0x3d	; 61
 718:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Mark=15; // variable to check if the current state represents a stored word or not
	u8 Local_u8LoopCounter=0;
	u8 Local_u8DataPart=0;// variable to store the data read from EEPROM
 71a:	19 82       	std	Y+1, r1	; 0x01
	u16 Local_u16ReadData=0; // variable to store the full state read from EEPROM
	u16 Local_u8BaseAddress=0b10000000000;//Address to read from
	u16 Local_u16CurrentState =0;//variable to store the current state
	Local_u16CurrentState |= (((u16)Global_u8RestInclined<<15) | ((u16)F5.inclined<<14) | ((u16)F4.inclined<<13) | ((u16)F3.inclined<<12) | ((u16)F2.inclined<<11) | ((u16)F1.inclined<<10) | ((u16)F5.Partition<<8) | ((u16)F4.Partition<<6) | ((u16)F3.Partition<<4) | ((u16)F2.Partition<<2) | ((u16)F1.Partition)); // getting the cuurent state from the fingers and rest variables
 71c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <Global_u8RestInclined>
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	ac 01       	movw	r20, r24
 724:	55 27       	eor	r21, r21
 726:	46 95       	lsr	r20
 728:	57 95       	ror	r21
 72a:	44 27       	eor	r20, r20
 72c:	03 e3       	ldi	r16, 0x33	; 51
 72e:	11 e0       	ldi	r17, 0x01	; 1
 730:	f8 01       	movw	r30, r16
 732:	21 81       	ldd	r18, Z+1	; 0x01
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	c9 01       	movw	r24, r18
 738:	90 e4       	ldi	r25, 0x40	; 64
 73a:	89 9f       	mul	r24, r25
 73c:	90 2d       	mov	r25, r0
 73e:	88 27       	eor	r24, r24
 740:	11 24       	eor	r1, r1
 742:	84 2b       	or	r24, r20
 744:	95 2b       	or	r25, r21
 746:	65 e3       	ldi	r22, 0x35	; 53
 748:	71 e0       	ldi	r23, 0x01	; 1
 74a:	fb 01       	movw	r30, r22
 74c:	21 81       	ldd	r18, Z+1	; 0x01
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	32 2f       	mov	r19, r18
 752:	22 27       	eor	r18, r18
 754:	32 95       	swap	r19
 756:	33 0f       	add	r19, r19
 758:	30 7e       	andi	r19, 0xE0	; 224
 75a:	82 2b       	or	r24, r18
 75c:	93 2b       	or	r25, r19
 75e:	47 e3       	ldi	r20, 0x37	; 55
 760:	51 e0       	ldi	r21, 0x01	; 1
 762:	fa 01       	movw	r30, r20
 764:	21 81       	ldd	r18, Z+1	; 0x01
 766:	30 e0       	ldi	r19, 0x00	; 0
 768:	32 2f       	mov	r19, r18
 76a:	22 27       	eor	r18, r18
 76c:	32 95       	swap	r19
 76e:	30 7f       	andi	r19, 0xF0	; 240
 770:	82 2b       	or	r24, r18
 772:	93 2b       	or	r25, r19
 774:	a9 e3       	ldi	r26, 0x39	; 57
 776:	b1 e0       	ldi	r27, 0x01	; 1
 778:	11 96       	adiw	r26, 0x01	; 1
 77a:	2c 91       	ld	r18, X
 77c:	11 97       	sbiw	r26, 0x01	; 1
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	32 2f       	mov	r19, r18
 782:	22 27       	eor	r18, r18
 784:	33 0f       	add	r19, r19
 786:	33 0f       	add	r19, r19
 788:	33 0f       	add	r19, r19
 78a:	82 2b       	or	r24, r18
 78c:	93 2b       	or	r25, r19
 78e:	0f 2e       	mov	r0, r31
 790:	fb e3       	ldi	r31, 0x3B	; 59
 792:	cf 2e       	mov	r12, r31
 794:	f1 e0       	ldi	r31, 0x01	; 1
 796:	df 2e       	mov	r13, r31
 798:	f0 2d       	mov	r31, r0
 79a:	f6 01       	movw	r30, r12
 79c:	21 81       	ldd	r18, Z+1	; 0x01
 79e:	30 e0       	ldi	r19, 0x00	; 0
 7a0:	32 2f       	mov	r19, r18
 7a2:	22 27       	eor	r18, r18
 7a4:	33 0f       	add	r19, r19
 7a6:	33 0f       	add	r19, r19
 7a8:	82 2b       	or	r24, r18
 7aa:	93 2b       	or	r25, r19
 7ac:	f8 01       	movw	r30, r16
 7ae:	20 81       	ld	r18, Z
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	32 2f       	mov	r19, r18
 7b4:	22 27       	eor	r18, r18
 7b6:	82 2b       	or	r24, r18
 7b8:	93 2b       	or	r25, r19
 7ba:	fb 01       	movw	r30, r22
 7bc:	e0 80       	ld	r14, Z
 7be:	f0 e4       	ldi	r31, 0x40	; 64
 7c0:	ef 9e       	mul	r14, r31
 7c2:	70 01       	movw	r14, r0
 7c4:	11 24       	eor	r1, r1
 7c6:	e8 2a       	or	r14, r24
 7c8:	f9 2a       	or	r15, r25
 7ca:	fa 01       	movw	r30, r20
 7cc:	20 81       	ld	r18, Z
 7ce:	f0 e1       	ldi	r31, 0x10	; 16
 7d0:	2f 9f       	mul	r18, r31
 7d2:	90 01       	movw	r18, r0
 7d4:	11 24       	eor	r1, r1
 7d6:	e2 2a       	or	r14, r18
 7d8:	f3 2a       	or	r15, r19
 7da:	8c 91       	ld	r24, X
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	88 0f       	add	r24, r24
 7e0:	99 1f       	adc	r25, r25
 7e2:	88 0f       	add	r24, r24
 7e4:	99 1f       	adc	r25, r25
 7e6:	e8 2a       	or	r14, r24
 7e8:	f9 2a       	or	r15, r25
 7ea:	f6 01       	movw	r30, r12
 7ec:	80 81       	ld	r24, Z
 7ee:	e8 2a       	or	r14, r24
	}
}
void LCD_Printing(void)
{
	u8 Local_u8Mark=15; // variable to check if the current state represents a stored word or not
	u8 Local_u8LoopCounter=0;
 7f0:	b1 2c       	mov	r11, r1
	u16 Local_u16ReadData=0; // variable to store the full state read from EEPROM
	u16 Local_u8BaseAddress=0b10000000000;//Address to read from
	u16 Local_u16CurrentState =0;//variable to store the current state
	Local_u16CurrentState |= (((u16)Global_u8RestInclined<<15) | ((u16)F5.inclined<<14) | ((u16)F4.inclined<<13) | ((u16)F3.inclined<<12) | ((u16)F2.inclined<<11) | ((u16)F1.inclined<<10) | ((u16)F5.Partition<<8) | ((u16)F4.Partition<<6) | ((u16)F3.Partition<<4) | ((u16)F2.Partition<<2) | ((u16)F1.Partition)); // getting the cuurent state from the fingers and rest variables
	
	for(Local_u8LoopCounter;Local_u8LoopCounter<15;Local_u8LoopCounter++) // loop to read stored states from EEPROM
 7f2:	1f c0       	rjmp	.+62     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
	{
		Local_u16ReadData=0;
		EEPROM_voidReadData(Local_u8BaseAddress+((u16)(Local_u8LoopCounter)*2),&Local_u8DataPart);
 7f4:	cb 2c       	mov	r12, r11
 7f6:	d1 2c       	mov	r13, r1
 7f8:	cc 0c       	add	r12, r12
 7fa:	dd 1c       	adc	r13, r13
 7fc:	be 01       	movw	r22, r28
 7fe:	6f 5f       	subi	r22, 0xFF	; 255
 800:	7f 4f       	sbci	r23, 0xFF	; 255
 802:	c6 01       	movw	r24, r12
 804:	9c 5f       	subi	r25, 0xFC	; 252
 806:	0e 94 ca 01 	call	0x394	; 0x394 <EEPROM_voidReadData>
		Local_u16ReadData |= Local_u8DataPart;
 80a:	09 81       	ldd	r16, Y+1	; 0x01
 80c:	10 e0       	ldi	r17, 0x00	; 0
		
		EEPROM_voidReadData(Local_u8BaseAddress+((u16)(Local_u8LoopCounter)*2)+1,&Local_u8DataPart);
 80e:	be 01       	movw	r22, r28
 810:	6f 5f       	subi	r22, 0xFF	; 255
 812:	7f 4f       	sbci	r23, 0xFF	; 255
 814:	c6 01       	movw	r24, r12
 816:	8f 5f       	subi	r24, 0xFF	; 255
 818:	9b 4f       	sbci	r25, 0xFB	; 251
 81a:	0e 94 ca 01 	call	0x394	; 0x394 <EEPROM_voidReadData>
		Local_u16ReadData |= (Local_u8DataPart<<8);
 81e:	89 81       	ldd	r24, Y+1	; 0x01
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	98 2f       	mov	r25, r24
 824:	88 27       	eor	r24, r24
 826:	08 2b       	or	r16, r24
 828:	19 2b       	or	r17, r25
		
		if(Local_u16CurrentState== Local_u16ReadData) // getting the current state representation word order in case it represents a stored word
 82a:	e0 16       	cp	r14, r16
 82c:	f1 06       	cpc	r15, r17
 82e:	41 f0       	breq	.+16     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
	u16 Local_u16ReadData=0; // variable to store the full state read from EEPROM
	u16 Local_u8BaseAddress=0b10000000000;//Address to read from
	u16 Local_u16CurrentState =0;//variable to store the current state
	Local_u16CurrentState |= (((u16)Global_u8RestInclined<<15) | ((u16)F5.inclined<<14) | ((u16)F4.inclined<<13) | ((u16)F3.inclined<<12) | ((u16)F2.inclined<<11) | ((u16)F1.inclined<<10) | ((u16)F5.Partition<<8) | ((u16)F4.Partition<<6) | ((u16)F3.Partition<<4) | ((u16)F2.Partition<<2) | ((u16)F1.Partition)); // getting the cuurent state from the fingers and rest variables
	
	for(Local_u8LoopCounter;Local_u8LoopCounter<15;Local_u8LoopCounter++) // loop to read stored states from EEPROM
 830:	b3 94       	inc	r11
 832:	fe e0       	ldi	r31, 0x0E	; 14
 834:	fb 15       	cp	r31, r11
 836:	f0 f6       	brcc	.-68     	; 0x7f4 <LCD_Printing+0xf2>
		default:break;
	}
}
void LCD_Printing(void)
{
	u8 Local_u8Mark=15; // variable to check if the current state represents a stored word or not
 838:	0f 2e       	mov	r0, r31
 83a:	ff e0       	ldi	r31, 0x0F	; 15
 83c:	bf 2e       	mov	r11, r31
 83e:	f0 2d       	mov	r31, r0
		{
			Local_u8Mark=Local_u8LoopCounter;
			break;
		}
	}
		LCD_voidSendCommand(1); // clearing LCD
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	0e 94 23 02 	call	0x446	; 0x446 <LCD_voidSendCommand>
		LCD_u8SetPos(0,0); // setting position of LCD cursor to 0,0
 846:	60 e0       	ldi	r22, 0x00	; 0
 848:	80 e0       	ldi	r24, 0x00	; 0
 84a:	0e 94 8d 02 	call	0x51a	; 0x51a <LCD_u8SetPos>
		if(Local_u8Mark != 15) // checking that the current state is a stored word
 84e:	2f e0       	ldi	r18, 0x0F	; 15
 850:	b2 16       	cp	r11, r18
 852:	09 f4       	brne	.+2      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 854:	56 c0       	rjmp	.+172    	; 0x902 <__stack+0xa3>
		{	
			switch(Local_u8Mark) // according to the order of the state stored in EEPROM, the corresponding word is printed on LCD
 856:	8b 2d       	mov	r24, r11
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	8f 30       	cpi	r24, 0x0F	; 15
 85c:	91 05       	cpc	r25, r1
 85e:	08 f0       	brcs	.+2      	; 0x862 <__stack+0x3>
 860:	54 c0       	rjmp	.+168    	; 0x90a <__stack+0xab>
 862:	fc 01       	movw	r30, r24
 864:	e6 5d       	subi	r30, 0xD6	; 214
 866:	ff 4f       	sbci	r31, 0xFF	; 255
 868:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__tablejump2__>
			{
				case 0: LCD_u8SendString("This is terrible"); break;
 86c:	8e e7       	ldi	r24, 0x7E	; 126
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_u8SendString>
 874:	4a c0       	rjmp	.+148    	; 0x90a <__stack+0xab>
				case 1:	LCD_u8SendString("I love you"); break;
 876:	8f e8       	ldi	r24, 0x8F	; 143
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_u8SendString>
 87e:	45 c0       	rjmp	.+138    	; 0x90a <__stack+0xab>
				case 2: LCD_u8SendString("I really love you"); break;
 880:	8a e9       	ldi	r24, 0x9A	; 154
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_u8SendString>
 888:	40 c0       	rjmp	.+128    	; 0x90a <__stack+0xab>
				case 3:	LCD_u8SendString("I'm watching you"); break;
 88a:	8c ea       	ldi	r24, 0xAC	; 172
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_u8SendString>
 892:	3b c0       	rjmp	.+118    	; 0x90a <__stack+0xab>
				case 4: LCD_u8SendString("You"); break;
 894:	8d eb       	ldi	r24, 0xBD	; 189
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_u8SendString>
 89c:	36 c0       	rjmp	.+108    	; 0x90a <__stack+0xab>
				case 5:	LCD_u8SendString("Good Job"); break;
 89e:	81 ec       	ldi	r24, 0xC1	; 193
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_u8SendString>
 8a6:	31 c0       	rjmp	.+98     	; 0x90a <__stack+0xab>
				case 6: LCD_u8SendString("Wish you a happy life"); break;
 8a8:	8a ec       	ldi	r24, 0xCA	; 202
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_u8SendString>
 8b0:	2c c0       	rjmp	.+88     	; 0x90a <__stack+0xab>
				case 7:	LCD_u8SendString("STOP"); break;
 8b2:	80 ee       	ldi	r24, 0xE0	; 224
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_u8SendString>
 8ba:	27 c0       	rjmp	.+78     	; 0x90a <__stack+0xab>
				case 8: LCD_u8SendString("I hate you"); break;
 8bc:	85 ee       	ldi	r24, 0xE5	; 229
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_u8SendString>
 8c4:	22 c0       	rjmp	.+68     	; 0x90a <__stack+0xab>
				case 9:	LCD_u8SendString("OK"); break;
 8c6:	80 ef       	ldi	r24, 0xF0	; 240
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_u8SendString>
 8ce:	1d c0       	rjmp	.+58     	; 0x90a <__stack+0xab>
				case 10:LCD_u8SendString("Peace"); break;
 8d0:	83 ef       	ldi	r24, 0xF3	; 243
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_u8SendString>
 8d8:	18 c0       	rjmp	.+48     	; 0x90a <__stack+0xab>
				case 11:LCD_u8SendString("Good luck"); break;
 8da:	89 ef       	ldi	r24, 0xF9	; 249
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_u8SendString>
 8e2:	13 c0       	rjmp	.+38     	; 0x90a <__stack+0xab>
				case 12:LCD_u8SendString("It hurts"); break;
 8e4:	83 e0       	ldi	r24, 0x03	; 3
 8e6:	91 e0       	ldi	r25, 0x01	; 1
 8e8:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_u8SendString>
 8ec:	0e c0       	rjmp	.+28     	; 0x90a <__stack+0xab>
				case 13:LCD_u8SendString("It hurts a lot"); break;
 8ee:	8c e0       	ldi	r24, 0x0C	; 12
 8f0:	91 e0       	ldi	r25, 0x01	; 1
 8f2:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_u8SendString>
 8f6:	09 c0       	rjmp	.+18     	; 0x90a <__stack+0xab>
				case 14:LCD_u8SendString("Sunday"); break;
 8f8:	8b e1       	ldi	r24, 0x1B	; 27
 8fa:	91 e0       	ldi	r25, 0x01	; 1
 8fc:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_u8SendString>
 900:	04 c0       	rjmp	.+8      	; 0x90a <__stack+0xab>
			}
		}
		else // if current state not equal a stored state in EEPROM, print 'no sign yet' on LCD
		{
				LCD_u8SendString("No Sign yet");
 902:	82 e2       	ldi	r24, 0x22	; 34
 904:	91 e0       	ldi	r25, 0x01	; 1
 906:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_u8SendString>
		}
}
 90a:	0f 90       	pop	r0
 90c:	df 91       	pop	r29
 90e:	cf 91       	pop	r28
 910:	1f 91       	pop	r17
 912:	0f 91       	pop	r16
 914:	ff 90       	pop	r15
 916:	ef 90       	pop	r14
 918:	df 90       	pop	r13
 91a:	cf 90       	pop	r12
 91c:	bf 90       	pop	r11
 91e:	08 95       	ret

00000920 <ADC_Operations>:

u8 Global_u8RestInclined=0; // variable to store the rest inclination state

void ADC_Operations(void)
{
	Global_u8Counter=0; // setting counter to specify the first finger
 920:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <Global_u8Counter>
	ADC_u8StartConversionAsynch(ADC_CHANNEL_0,&Global_ADC_u16ResultD,Flex_App); // getting the current finger 1 partition, converting using ADC from channel0 and setting flexapp as callback fn
 924:	4e eb       	ldi	r20, 0xBE	; 190
 926:	52 e0       	ldi	r21, 0x02	; 2
 928:	6e e3       	ldi	r22, 0x3E	; 62
 92a:	71 e0       	ldi	r23, 0x01	; 1
 92c:	80 e0       	ldi	r24, 0x00	; 0
 92e:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_u8StartConversionAsynch>
	DIO_u8GetPinValue(DIO_PORTD,DIO_PIN0,&F1.inclined);// getting the current finger 1 inclination
 932:	4c e3       	ldi	r20, 0x3C	; 60
 934:	51 e0       	ldi	r21, 0x01	; 1
 936:	60 e0       	ldi	r22, 0x00	; 0
 938:	83 e0       	ldi	r24, 0x03	; 3
 93a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <DIO_u8GetPinValue>
	TMR0_delay(10);//10 ms delay
 93e:	8a e0       	ldi	r24, 0x0A	; 10
 940:	0e 94 61 05 	call	0xac2	; 0xac2 <TMR0_delay>
	//_delay_ms(10);
	Global_u8Counter++; // setting counter to specify the second finger
 944:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <Global_u8Counter>
 948:	8f 5f       	subi	r24, 0xFF	; 255
 94a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <Global_u8Counter>
	ADC_u8StartConversionAsynch(ADC_CHANNEL_1,&Global_ADC_u16ResultD,Flex_App); // getting the current finger 2 partition, converting using ADC from channel1 and setting flexapp as callback fn
 94e:	4e eb       	ldi	r20, 0xBE	; 190
 950:	52 e0       	ldi	r21, 0x02	; 2
 952:	6e e3       	ldi	r22, 0x3E	; 62
 954:	71 e0       	ldi	r23, 0x01	; 1
 956:	81 e0       	ldi	r24, 0x01	; 1
 958:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_u8StartConversionAsynch>
	DIO_u8GetPinValue(DIO_PORTD,DIO_PIN1,&F2.inclined);// getting the current finger 2 inclination
 95c:	4a e3       	ldi	r20, 0x3A	; 58
 95e:	51 e0       	ldi	r21, 0x01	; 1
 960:	61 e0       	ldi	r22, 0x01	; 1
 962:	83 e0       	ldi	r24, 0x03	; 3
 964:	0e 94 6e 01 	call	0x2dc	; 0x2dc <DIO_u8GetPinValue>
	TMR0_delay(10);//10 ms delay
 968:	8a e0       	ldi	r24, 0x0A	; 10
 96a:	0e 94 61 05 	call	0xac2	; 0xac2 <TMR0_delay>
	//_delay_ms(10);

	Global_u8Counter++; // setting counter to specify the third finger
 96e:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <Global_u8Counter>
 972:	8f 5f       	subi	r24, 0xFF	; 255
 974:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <Global_u8Counter>
	ADC_u8StartConversionAsynch(ADC_CHANNEL_2,&Global_ADC_u16ResultD,Flex_App); // getting the current finger 3 partition, converting using ADC from channel2 and setting flexapp as callback fn
 978:	4e eb       	ldi	r20, 0xBE	; 190
 97a:	52 e0       	ldi	r21, 0x02	; 2
 97c:	6e e3       	ldi	r22, 0x3E	; 62
 97e:	71 e0       	ldi	r23, 0x01	; 1
 980:	82 e0       	ldi	r24, 0x02	; 2
 982:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_u8StartConversionAsynch>
	DIO_u8GetPinValue(DIO_PORTD,DIO_PIN2,&F3.inclined);// getting the current finger 3 inclination
 986:	48 e3       	ldi	r20, 0x38	; 56
 988:	51 e0       	ldi	r21, 0x01	; 1
 98a:	62 e0       	ldi	r22, 0x02	; 2
 98c:	83 e0       	ldi	r24, 0x03	; 3
 98e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <DIO_u8GetPinValue>
	TMR0_delay(10);//10 ms delay
 992:	8a e0       	ldi	r24, 0x0A	; 10
 994:	0e 94 61 05 	call	0xac2	; 0xac2 <TMR0_delay>
	//_delay_ms(10);
	
	Global_u8Counter++; // setting counter to specify the fourth finger
 998:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <Global_u8Counter>
 99c:	8f 5f       	subi	r24, 0xFF	; 255
 99e:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <Global_u8Counter>
	ADC_u8StartConversionAsynch(ADC_CHANNEL_3,&Global_ADC_u16ResultD,Flex_App);// getting the current finger 4 partition, converting using ADC from channel3 and setting flexapp as callback fn
 9a2:	4e eb       	ldi	r20, 0xBE	; 190
 9a4:	52 e0       	ldi	r21, 0x02	; 2
 9a6:	6e e3       	ldi	r22, 0x3E	; 62
 9a8:	71 e0       	ldi	r23, 0x01	; 1
 9aa:	83 e0       	ldi	r24, 0x03	; 3
 9ac:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_u8StartConversionAsynch>
	DIO_u8GetPinValue(DIO_PORTD,DIO_PIN3,&F4.inclined);// getting the current finger 4 inclination
 9b0:	46 e3       	ldi	r20, 0x36	; 54
 9b2:	51 e0       	ldi	r21, 0x01	; 1
 9b4:	63 e0       	ldi	r22, 0x03	; 3
 9b6:	83 e0       	ldi	r24, 0x03	; 3
 9b8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <DIO_u8GetPinValue>
	TMR0_delay(10);//10 ms delay
 9bc:	8a e0       	ldi	r24, 0x0A	; 10
 9be:	0e 94 61 05 	call	0xac2	; 0xac2 <TMR0_delay>
	//_delay_ms(10);
	
	Global_u8Counter++; // setting counter to specify the fifth finger
 9c2:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <Global_u8Counter>
 9c6:	8f 5f       	subi	r24, 0xFF	; 255
 9c8:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <Global_u8Counter>
	ADC_u8StartConversionAsynch(ADC_CHANNEL_4,&Global_ADC_u16ResultD,Flex_App);// getting the current finger 5 partition, converting using ADC from channel4 and setting flexapp as callback fn
 9cc:	4e eb       	ldi	r20, 0xBE	; 190
 9ce:	52 e0       	ldi	r21, 0x02	; 2
 9d0:	6e e3       	ldi	r22, 0x3E	; 62
 9d2:	71 e0       	ldi	r23, 0x01	; 1
 9d4:	84 e0       	ldi	r24, 0x04	; 4
 9d6:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_u8StartConversionAsynch>
	DIO_u8GetPinValue(DIO_PORTD,DIO_PIN4,&F5.inclined);// getting the current finger 5 inclination
 9da:	44 e3       	ldi	r20, 0x34	; 52
 9dc:	51 e0       	ldi	r21, 0x01	; 1
 9de:	64 e0       	ldi	r22, 0x04	; 4
 9e0:	83 e0       	ldi	r24, 0x03	; 3
 9e2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <DIO_u8GetPinValue>
	TMR0_delay(10);//10 ms delay
 9e6:	8a e0       	ldi	r24, 0x0A	; 10
 9e8:	0e 94 61 05 	call	0xac2	; 0xac2 <TMR0_delay>
	//_delay_ms(10);
	
	DIO_u8GetPinValue(DIO_PORTD,DIO_PIN5,&Global_u8RestInclined); //getting the rest inclination
 9ec:	42 e3       	ldi	r20, 0x32	; 50
 9ee:	51 e0       	ldi	r21, 0x01	; 1
 9f0:	65 e0       	ldi	r22, 0x05	; 5
 9f2:	83 e0       	ldi	r24, 0x03	; 3
 9f4:	0e 94 6e 01 	call	0x2dc	; 0x2dc <DIO_u8GetPinValue>

	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	LCD_Printing(); // fn comparing current states with stored states to print on lcd
 9f8:	0e 94 81 03 	call	0x702	; 0x702 <LCD_Printing>
 9fc:	08 95       	ret

000009fe <TIMER0_voidInit>:
 9fe:	83 b7       	in	r24, 0x33	; 51
 a00:	8f 7b       	andi	r24, 0xBF	; 191
 a02:	83 bf       	out	0x33, r24	; 51
 a04:	83 b7       	in	r24, 0x33	; 51
 a06:	88 60       	ori	r24, 0x08	; 8
 a08:	83 bf       	out	0x33, r24	; 51
 a0a:	83 b7       	in	r24, 0x33	; 51
 a0c:	8f 7c       	andi	r24, 0xCF	; 207
 a0e:	83 bf       	out	0x33, r24	; 51
 a10:	83 b7       	in	r24, 0x33	; 51
 a12:	83 bf       	out	0x33, r24	; 51
 a14:	89 ef       	ldi	r24, 0xF9	; 249
 a16:	8c bf       	out	0x3c, r24	; 60
 a18:	83 b7       	in	r24, 0x33	; 51
 a1a:	88 7f       	andi	r24, 0xF8	; 248
 a1c:	83 bf       	out	0x33, r24	; 51
 a1e:	83 b7       	in	r24, 0x33	; 51
 a20:	82 60       	ori	r24, 0x02	; 2
 a22:	83 bf       	out	0x33, r24	; 51
 a24:	08 95       	ret

00000a26 <__vector_11>:
 a26:	1f 92       	push	r1
 a28:	0f 92       	push	r0
 a2a:	0f b6       	in	r0, 0x3f	; 63
 a2c:	0f 92       	push	r0
 a2e:	11 24       	eor	r1, r1
 a30:	2f 93       	push	r18
 a32:	3f 93       	push	r19
 a34:	4f 93       	push	r20
 a36:	5f 93       	push	r21
 a38:	6f 93       	push	r22
 a3a:	7f 93       	push	r23
 a3c:	8f 93       	push	r24
 a3e:	9f 93       	push	r25
 a40:	af 93       	push	r26
 a42:	bf 93       	push	r27
 a44:	ef 93       	push	r30
 a46:	ff 93       	push	r31
 a48:	e0 e0       	ldi	r30, 0x00	; 0
 a4a:	f0 e0       	ldi	r31, 0x00	; 0
 a4c:	09 95       	icall
 a4e:	ff 91       	pop	r31
 a50:	ef 91       	pop	r30
 a52:	bf 91       	pop	r27
 a54:	af 91       	pop	r26
 a56:	9f 91       	pop	r25
 a58:	8f 91       	pop	r24
 a5a:	7f 91       	pop	r23
 a5c:	6f 91       	pop	r22
 a5e:	5f 91       	pop	r21
 a60:	4f 91       	pop	r20
 a62:	3f 91       	pop	r19
 a64:	2f 91       	pop	r18
 a66:	0f 90       	pop	r0
 a68:	0f be       	out	0x3f, r0	; 63
 a6a:	0f 90       	pop	r0
 a6c:	1f 90       	pop	r1
 a6e:	18 95       	reti

00000a70 <__vector_6>:
 a70:	1f 92       	push	r1
 a72:	0f 92       	push	r0
 a74:	0f b6       	in	r0, 0x3f	; 63
 a76:	0f 92       	push	r0
 a78:	11 24       	eor	r1, r1
 a7a:	2f 93       	push	r18
 a7c:	3f 93       	push	r19
 a7e:	4f 93       	push	r20
 a80:	5f 93       	push	r21
 a82:	6f 93       	push	r22
 a84:	7f 93       	push	r23
 a86:	8f 93       	push	r24
 a88:	9f 93       	push	r25
 a8a:	af 93       	push	r26
 a8c:	bf 93       	push	r27
 a8e:	ef 93       	push	r30
 a90:	ff 93       	push	r31
 a92:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <ptrtofunc_cap>
 a96:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <ptrtofunc_cap+0x1>
 a9a:	09 95       	icall
 a9c:	ff 91       	pop	r31
 a9e:	ef 91       	pop	r30
 aa0:	bf 91       	pop	r27
 aa2:	af 91       	pop	r26
 aa4:	9f 91       	pop	r25
 aa6:	8f 91       	pop	r24
 aa8:	7f 91       	pop	r23
 aaa:	6f 91       	pop	r22
 aac:	5f 91       	pop	r21
 aae:	4f 91       	pop	r20
 ab0:	3f 91       	pop	r19
 ab2:	2f 91       	pop	r18
 ab4:	0f 90       	pop	r0
 ab6:	0f be       	out	0x3f, r0	; 63
 ab8:	0f 90       	pop	r0
 aba:	1f 90       	pop	r1
 abc:	18 95       	reti

00000abe <TIMER0_voidSetValue>:
 abe:	82 bf       	out	0x32, r24	; 50
 ac0:	08 95       	ret

00000ac2 <TMR0_delay>:
 ac2:	1f 93       	push	r17
 ac4:	cf 93       	push	r28
 ac6:	df 93       	push	r29
 ac8:	18 2f       	mov	r17, r24
 aca:	d0 e0       	ldi	r29, 0x00	; 0
 acc:	0f c0       	rjmp	.+30     	; 0xaec <TMR0_delay+0x2a>
 ace:	80 e0       	ldi	r24, 0x00	; 0
 ad0:	0e 94 5f 05 	call	0xabe	; 0xabe <TIMER0_voidSetValue>
 ad4:	08 b6       	in	r0, 0x38	; 56
 ad6:	01 fe       	sbrs	r0, 1
 ad8:	fd cf       	rjmp	.-6      	; 0xad4 <TMR0_delay+0x12>
 ada:	88 b7       	in	r24, 0x38	; 56
 adc:	82 60       	ori	r24, 0x02	; 2
 ade:	88 bf       	out	0x38, r24	; 56
 ae0:	cf 5f       	subi	r28, 0xFF	; 255
 ae2:	01 c0       	rjmp	.+2      	; 0xae6 <TMR0_delay+0x24>
 ae4:	c0 e0       	ldi	r28, 0x00	; 0
 ae6:	c8 30       	cpi	r28, 0x08	; 8
 ae8:	90 f3       	brcs	.-28     	; 0xace <TMR0_delay+0xc>
 aea:	df 5f       	subi	r29, 0xFF	; 255
 aec:	d1 17       	cp	r29, r17
 aee:	d0 f3       	brcs	.-12     	; 0xae4 <TMR0_delay+0x22>
 af0:	df 91       	pop	r29
 af2:	cf 91       	pop	r28
 af4:	1f 91       	pop	r17
 af6:	08 95       	ret

00000af8 <TWI_initMaster>:
 af8:	81 b1       	in	r24, 0x01	; 1
 afa:	8e 7f       	andi	r24, 0xFE	; 254
 afc:	81 b9       	out	0x01, r24	; 1
 afe:	81 b1       	in	r24, 0x01	; 1
 b00:	8d 7f       	andi	r24, 0xFD	; 253
 b02:	81 b9       	out	0x01, r24	; 1
 b04:	8c e0       	ldi	r24, 0x0C	; 12
 b06:	80 b9       	out	0x00, r24	; 0
 b08:	86 b7       	in	r24, 0x36	; 54
 b0a:	84 60       	ori	r24, 0x04	; 4
 b0c:	86 bf       	out	0x36, r24	; 54
 b0e:	08 95       	ret

00000b10 <TWI_sendStartCondition>:
 b10:	86 b7       	in	r24, 0x36	; 54
 b12:	80 62       	ori	r24, 0x20	; 32
 b14:	86 bf       	out	0x36, r24	; 54
 b16:	86 b7       	in	r24, 0x36	; 54
 b18:	80 68       	ori	r24, 0x80	; 128
 b1a:	86 bf       	out	0x36, r24	; 54
 b1c:	06 b6       	in	r0, 0x36	; 54
 b1e:	07 fe       	sbrs	r0, 7
 b20:	fd cf       	rjmp	.-6      	; 0xb1c <TWI_sendStartCondition+0xc>
 b22:	81 b1       	in	r24, 0x01	; 1
 b24:	88 7f       	andi	r24, 0xF8	; 248
 b26:	88 30       	cpi	r24, 0x08	; 8
 b28:	e1 f7       	brne	.-8      	; 0xb22 <TWI_sendStartCondition+0x12>
 b2a:	08 95       	ret

00000b2c <TWI_sendRepStartCondition>:
 b2c:	86 b7       	in	r24, 0x36	; 54
 b2e:	80 62       	ori	r24, 0x20	; 32
 b30:	86 bf       	out	0x36, r24	; 54
 b32:	86 b7       	in	r24, 0x36	; 54
 b34:	80 68       	ori	r24, 0x80	; 128
 b36:	86 bf       	out	0x36, r24	; 54
 b38:	06 b6       	in	r0, 0x36	; 54
 b3a:	07 fe       	sbrs	r0, 7
 b3c:	fd cf       	rjmp	.-6      	; 0xb38 <TWI_sendRepStartCondition+0xc>
 b3e:	81 b1       	in	r24, 0x01	; 1
 b40:	88 7f       	andi	r24, 0xF8	; 248
 b42:	80 31       	cpi	r24, 0x10	; 16
 b44:	e1 f7       	brne	.-8      	; 0xb3e <TWI_sendRepStartCondition+0x12>
 b46:	08 95       	ret

00000b48 <TWI_sendStopCondition>:
 b48:	86 b7       	in	r24, 0x36	; 54
 b4a:	80 61       	ori	r24, 0x10	; 16
 b4c:	86 bf       	out	0x36, r24	; 54
 b4e:	86 b7       	in	r24, 0x36	; 54
 b50:	80 68       	ori	r24, 0x80	; 128
 b52:	86 bf       	out	0x36, r24	; 54
 b54:	08 95       	ret

00000b56 <TWI_sendSlaveAddwithWrite>:
 b56:	88 0f       	add	r24, r24
 b58:	83 b9       	out	0x03, r24	; 3
 b5a:	83 b1       	in	r24, 0x03	; 3
 b5c:	8e 7f       	andi	r24, 0xFE	; 254
 b5e:	83 b9       	out	0x03, r24	; 3
 b60:	86 b7       	in	r24, 0x36	; 54
 b62:	8f 7d       	andi	r24, 0xDF	; 223
 b64:	86 bf       	out	0x36, r24	; 54
 b66:	86 b7       	in	r24, 0x36	; 54
 b68:	80 68       	ori	r24, 0x80	; 128
 b6a:	86 bf       	out	0x36, r24	; 54
 b6c:	06 b6       	in	r0, 0x36	; 54
 b6e:	07 fe       	sbrs	r0, 7
 b70:	fd cf       	rjmp	.-6      	; 0xb6c <TWI_sendSlaveAddwithWrite+0x16>
 b72:	81 b1       	in	r24, 0x01	; 1
 b74:	88 7f       	andi	r24, 0xF8	; 248
 b76:	88 31       	cpi	r24, 0x18	; 24
 b78:	e1 f7       	brne	.-8      	; 0xb72 <TWI_sendSlaveAddwithWrite+0x1c>
 b7a:	08 95       	ret

00000b7c <TWI_sendSlaveAddwithRead>:
 b7c:	88 0f       	add	r24, r24
 b7e:	83 b9       	out	0x03, r24	; 3
 b80:	83 b1       	in	r24, 0x03	; 3
 b82:	81 60       	ori	r24, 0x01	; 1
 b84:	83 b9       	out	0x03, r24	; 3
 b86:	86 b7       	in	r24, 0x36	; 54
 b88:	8f 7d       	andi	r24, 0xDF	; 223
 b8a:	86 bf       	out	0x36, r24	; 54
 b8c:	86 b7       	in	r24, 0x36	; 54
 b8e:	80 68       	ori	r24, 0x80	; 128
 b90:	86 bf       	out	0x36, r24	; 54
 b92:	06 b6       	in	r0, 0x36	; 54
 b94:	07 fe       	sbrs	r0, 7
 b96:	fd cf       	rjmp	.-6      	; 0xb92 <TWI_sendSlaveAddwithRead+0x16>
 b98:	81 b1       	in	r24, 0x01	; 1
 b9a:	88 7f       	andi	r24, 0xF8	; 248
 b9c:	80 34       	cpi	r24, 0x40	; 64
 b9e:	e1 f7       	brne	.-8      	; 0xb98 <TWI_sendSlaveAddwithRead+0x1c>
 ba0:	08 95       	ret

00000ba2 <TWI_sendMasterDataByte>:
 ba2:	83 b9       	out	0x03, r24	; 3
 ba4:	86 b7       	in	r24, 0x36	; 54
 ba6:	80 68       	ori	r24, 0x80	; 128
 ba8:	86 bf       	out	0x36, r24	; 54
 baa:	06 b6       	in	r0, 0x36	; 54
 bac:	07 fe       	sbrs	r0, 7
 bae:	fd cf       	rjmp	.-6      	; 0xbaa <TWI_sendMasterDataByte+0x8>
 bb0:	81 b1       	in	r24, 0x01	; 1
 bb2:	88 7f       	andi	r24, 0xF8	; 248
 bb4:	88 32       	cpi	r24, 0x28	; 40
 bb6:	e1 f7       	brne	.-8      	; 0xbb0 <TWI_sendMasterDataByte+0xe>
 bb8:	08 95       	ret

00000bba <TWI_readMasterDataByte>:
 bba:	fc 01       	movw	r30, r24
 bbc:	89 2b       	or	r24, r25
 bbe:	41 f0       	breq	.+16     	; 0xbd0 <TWI_readMasterDataByte+0x16>
 bc0:	96 b7       	in	r25, 0x36	; 54
 bc2:	90 68       	ori	r25, 0x80	; 128
 bc4:	96 bf       	out	0x36, r25	; 54
 bc6:	06 b6       	in	r0, 0x36	; 54
 bc8:	07 fe       	sbrs	r0, 7
 bca:	fd cf       	rjmp	.-6      	; 0xbc6 <TWI_readMasterDataByte+0xc>
 bcc:	83 b1       	in	r24, 0x03	; 3
 bce:	80 83       	st	Z, r24
 bd0:	08 95       	ret

00000bd2 <__fixunssfsi>:
 bd2:	0e 94 5d 06 	call	0xcba	; 0xcba <__fp_splitA>
 bd6:	88 f0       	brcs	.+34     	; 0xbfa <__fixunssfsi+0x28>
 bd8:	9f 57       	subi	r25, 0x7F	; 127
 bda:	98 f0       	brcs	.+38     	; 0xc02 <__fixunssfsi+0x30>
 bdc:	b9 2f       	mov	r27, r25
 bde:	99 27       	eor	r25, r25
 be0:	b7 51       	subi	r27, 0x17	; 23
 be2:	b0 f0       	brcs	.+44     	; 0xc10 <__fixunssfsi+0x3e>
 be4:	e1 f0       	breq	.+56     	; 0xc1e <__fixunssfsi+0x4c>
 be6:	66 0f       	add	r22, r22
 be8:	77 1f       	adc	r23, r23
 bea:	88 1f       	adc	r24, r24
 bec:	99 1f       	adc	r25, r25
 bee:	1a f0       	brmi	.+6      	; 0xbf6 <__fixunssfsi+0x24>
 bf0:	ba 95       	dec	r27
 bf2:	c9 f7       	brne	.-14     	; 0xbe6 <__fixunssfsi+0x14>
 bf4:	14 c0       	rjmp	.+40     	; 0xc1e <__fixunssfsi+0x4c>
 bf6:	b1 30       	cpi	r27, 0x01	; 1
 bf8:	91 f0       	breq	.+36     	; 0xc1e <__fixunssfsi+0x4c>
 bfa:	0e 94 77 06 	call	0xcee	; 0xcee <__fp_zero>
 bfe:	b1 e0       	ldi	r27, 0x01	; 1
 c00:	08 95       	ret
 c02:	0c 94 77 06 	jmp	0xcee	; 0xcee <__fp_zero>
 c06:	67 2f       	mov	r22, r23
 c08:	78 2f       	mov	r23, r24
 c0a:	88 27       	eor	r24, r24
 c0c:	b8 5f       	subi	r27, 0xF8	; 248
 c0e:	39 f0       	breq	.+14     	; 0xc1e <__fixunssfsi+0x4c>
 c10:	b9 3f       	cpi	r27, 0xF9	; 249
 c12:	cc f3       	brlt	.-14     	; 0xc06 <__fixunssfsi+0x34>
 c14:	86 95       	lsr	r24
 c16:	77 95       	ror	r23
 c18:	67 95       	ror	r22
 c1a:	b3 95       	inc	r27
 c1c:	d9 f7       	brne	.-10     	; 0xc14 <__fixunssfsi+0x42>
 c1e:	3e f4       	brtc	.+14     	; 0xc2e <__fixunssfsi+0x5c>
 c20:	90 95       	com	r25
 c22:	80 95       	com	r24
 c24:	70 95       	com	r23
 c26:	61 95       	neg	r22
 c28:	7f 4f       	sbci	r23, 0xFF	; 255
 c2a:	8f 4f       	sbci	r24, 0xFF	; 255
 c2c:	9f 4f       	sbci	r25, 0xFF	; 255
 c2e:	08 95       	ret

00000c30 <__floatunsisf>:
 c30:	e8 94       	clt
 c32:	09 c0       	rjmp	.+18     	; 0xc46 <__floatsisf+0x12>

00000c34 <__floatsisf>:
 c34:	97 fb       	bst	r25, 7
 c36:	3e f4       	brtc	.+14     	; 0xc46 <__floatsisf+0x12>
 c38:	90 95       	com	r25
 c3a:	80 95       	com	r24
 c3c:	70 95       	com	r23
 c3e:	61 95       	neg	r22
 c40:	7f 4f       	sbci	r23, 0xFF	; 255
 c42:	8f 4f       	sbci	r24, 0xFF	; 255
 c44:	9f 4f       	sbci	r25, 0xFF	; 255
 c46:	99 23       	and	r25, r25
 c48:	a9 f0       	breq	.+42     	; 0xc74 <__floatsisf+0x40>
 c4a:	f9 2f       	mov	r31, r25
 c4c:	96 e9       	ldi	r25, 0x96	; 150
 c4e:	bb 27       	eor	r27, r27
 c50:	93 95       	inc	r25
 c52:	f6 95       	lsr	r31
 c54:	87 95       	ror	r24
 c56:	77 95       	ror	r23
 c58:	67 95       	ror	r22
 c5a:	b7 95       	ror	r27
 c5c:	f1 11       	cpse	r31, r1
 c5e:	f8 cf       	rjmp	.-16     	; 0xc50 <__floatsisf+0x1c>
 c60:	fa f4       	brpl	.+62     	; 0xca0 <__floatsisf+0x6c>
 c62:	bb 0f       	add	r27, r27
 c64:	11 f4       	brne	.+4      	; 0xc6a <__floatsisf+0x36>
 c66:	60 ff       	sbrs	r22, 0
 c68:	1b c0       	rjmp	.+54     	; 0xca0 <__floatsisf+0x6c>
 c6a:	6f 5f       	subi	r22, 0xFF	; 255
 c6c:	7f 4f       	sbci	r23, 0xFF	; 255
 c6e:	8f 4f       	sbci	r24, 0xFF	; 255
 c70:	9f 4f       	sbci	r25, 0xFF	; 255
 c72:	16 c0       	rjmp	.+44     	; 0xca0 <__floatsisf+0x6c>
 c74:	88 23       	and	r24, r24
 c76:	11 f0       	breq	.+4      	; 0xc7c <__floatsisf+0x48>
 c78:	96 e9       	ldi	r25, 0x96	; 150
 c7a:	11 c0       	rjmp	.+34     	; 0xc9e <__floatsisf+0x6a>
 c7c:	77 23       	and	r23, r23
 c7e:	21 f0       	breq	.+8      	; 0xc88 <__floatsisf+0x54>
 c80:	9e e8       	ldi	r25, 0x8E	; 142
 c82:	87 2f       	mov	r24, r23
 c84:	76 2f       	mov	r23, r22
 c86:	05 c0       	rjmp	.+10     	; 0xc92 <__floatsisf+0x5e>
 c88:	66 23       	and	r22, r22
 c8a:	71 f0       	breq	.+28     	; 0xca8 <__floatsisf+0x74>
 c8c:	96 e8       	ldi	r25, 0x86	; 134
 c8e:	86 2f       	mov	r24, r22
 c90:	70 e0       	ldi	r23, 0x00	; 0
 c92:	60 e0       	ldi	r22, 0x00	; 0
 c94:	2a f0       	brmi	.+10     	; 0xca0 <__floatsisf+0x6c>
 c96:	9a 95       	dec	r25
 c98:	66 0f       	add	r22, r22
 c9a:	77 1f       	adc	r23, r23
 c9c:	88 1f       	adc	r24, r24
 c9e:	da f7       	brpl	.-10     	; 0xc96 <__floatsisf+0x62>
 ca0:	88 0f       	add	r24, r24
 ca2:	96 95       	lsr	r25
 ca4:	87 95       	ror	r24
 ca6:	97 f9       	bld	r25, 7
 ca8:	08 95       	ret

00000caa <__fp_split3>:
 caa:	57 fd       	sbrc	r21, 7
 cac:	90 58       	subi	r25, 0x80	; 128
 cae:	44 0f       	add	r20, r20
 cb0:	55 1f       	adc	r21, r21
 cb2:	59 f0       	breq	.+22     	; 0xcca <__fp_splitA+0x10>
 cb4:	5f 3f       	cpi	r21, 0xFF	; 255
 cb6:	71 f0       	breq	.+28     	; 0xcd4 <__fp_splitA+0x1a>
 cb8:	47 95       	ror	r20

00000cba <__fp_splitA>:
 cba:	88 0f       	add	r24, r24
 cbc:	97 fb       	bst	r25, 7
 cbe:	99 1f       	adc	r25, r25
 cc0:	61 f0       	breq	.+24     	; 0xcda <__fp_splitA+0x20>
 cc2:	9f 3f       	cpi	r25, 0xFF	; 255
 cc4:	79 f0       	breq	.+30     	; 0xce4 <__fp_splitA+0x2a>
 cc6:	87 95       	ror	r24
 cc8:	08 95       	ret
 cca:	12 16       	cp	r1, r18
 ccc:	13 06       	cpc	r1, r19
 cce:	14 06       	cpc	r1, r20
 cd0:	55 1f       	adc	r21, r21
 cd2:	f2 cf       	rjmp	.-28     	; 0xcb8 <__fp_split3+0xe>
 cd4:	46 95       	lsr	r20
 cd6:	f1 df       	rcall	.-30     	; 0xcba <__fp_splitA>
 cd8:	08 c0       	rjmp	.+16     	; 0xcea <__fp_splitA+0x30>
 cda:	16 16       	cp	r1, r22
 cdc:	17 06       	cpc	r1, r23
 cde:	18 06       	cpc	r1, r24
 ce0:	99 1f       	adc	r25, r25
 ce2:	f1 cf       	rjmp	.-30     	; 0xcc6 <__fp_splitA+0xc>
 ce4:	86 95       	lsr	r24
 ce6:	71 05       	cpc	r23, r1
 ce8:	61 05       	cpc	r22, r1
 cea:	08 94       	sec
 cec:	08 95       	ret

00000cee <__fp_zero>:
 cee:	e8 94       	clt

00000cf0 <__fp_szero>:
 cf0:	bb 27       	eor	r27, r27
 cf2:	66 27       	eor	r22, r22
 cf4:	77 27       	eor	r23, r23
 cf6:	cb 01       	movw	r24, r22
 cf8:	97 f9       	bld	r25, 7
 cfa:	08 95       	ret

00000cfc <__mulsf3>:
 cfc:	0e 94 91 06 	call	0xd22	; 0xd22 <__mulsf3x>
 d00:	0c 94 02 07 	jmp	0xe04	; 0xe04 <__fp_round>
 d04:	0e 94 f4 06 	call	0xde8	; 0xde8 <__fp_pscA>
 d08:	38 f0       	brcs	.+14     	; 0xd18 <__mulsf3+0x1c>
 d0a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__fp_pscB>
 d0e:	20 f0       	brcs	.+8      	; 0xd18 <__mulsf3+0x1c>
 d10:	95 23       	and	r25, r21
 d12:	11 f0       	breq	.+4      	; 0xd18 <__mulsf3+0x1c>
 d14:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__fp_inf>
 d18:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__fp_nan>
 d1c:	11 24       	eor	r1, r1
 d1e:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <__fp_szero>

00000d22 <__mulsf3x>:
 d22:	0e 94 55 06 	call	0xcaa	; 0xcaa <__fp_split3>
 d26:	70 f3       	brcs	.-36     	; 0xd04 <__mulsf3+0x8>

00000d28 <__mulsf3_pse>:
 d28:	95 9f       	mul	r25, r21
 d2a:	c1 f3       	breq	.-16     	; 0xd1c <__mulsf3+0x20>
 d2c:	95 0f       	add	r25, r21
 d2e:	50 e0       	ldi	r21, 0x00	; 0
 d30:	55 1f       	adc	r21, r21
 d32:	62 9f       	mul	r22, r18
 d34:	f0 01       	movw	r30, r0
 d36:	72 9f       	mul	r23, r18
 d38:	bb 27       	eor	r27, r27
 d3a:	f0 0d       	add	r31, r0
 d3c:	b1 1d       	adc	r27, r1
 d3e:	63 9f       	mul	r22, r19
 d40:	aa 27       	eor	r26, r26
 d42:	f0 0d       	add	r31, r0
 d44:	b1 1d       	adc	r27, r1
 d46:	aa 1f       	adc	r26, r26
 d48:	64 9f       	mul	r22, r20
 d4a:	66 27       	eor	r22, r22
 d4c:	b0 0d       	add	r27, r0
 d4e:	a1 1d       	adc	r26, r1
 d50:	66 1f       	adc	r22, r22
 d52:	82 9f       	mul	r24, r18
 d54:	22 27       	eor	r18, r18
 d56:	b0 0d       	add	r27, r0
 d58:	a1 1d       	adc	r26, r1
 d5a:	62 1f       	adc	r22, r18
 d5c:	73 9f       	mul	r23, r19
 d5e:	b0 0d       	add	r27, r0
 d60:	a1 1d       	adc	r26, r1
 d62:	62 1f       	adc	r22, r18
 d64:	83 9f       	mul	r24, r19
 d66:	a0 0d       	add	r26, r0
 d68:	61 1d       	adc	r22, r1
 d6a:	22 1f       	adc	r18, r18
 d6c:	74 9f       	mul	r23, r20
 d6e:	33 27       	eor	r19, r19
 d70:	a0 0d       	add	r26, r0
 d72:	61 1d       	adc	r22, r1
 d74:	23 1f       	adc	r18, r19
 d76:	84 9f       	mul	r24, r20
 d78:	60 0d       	add	r22, r0
 d7a:	21 1d       	adc	r18, r1
 d7c:	82 2f       	mov	r24, r18
 d7e:	76 2f       	mov	r23, r22
 d80:	6a 2f       	mov	r22, r26
 d82:	11 24       	eor	r1, r1
 d84:	9f 57       	subi	r25, 0x7F	; 127
 d86:	50 40       	sbci	r21, 0x00	; 0
 d88:	9a f0       	brmi	.+38     	; 0xdb0 <__mulsf3_pse+0x88>
 d8a:	f1 f0       	breq	.+60     	; 0xdc8 <__mulsf3_pse+0xa0>
 d8c:	88 23       	and	r24, r24
 d8e:	4a f0       	brmi	.+18     	; 0xda2 <__mulsf3_pse+0x7a>
 d90:	ee 0f       	add	r30, r30
 d92:	ff 1f       	adc	r31, r31
 d94:	bb 1f       	adc	r27, r27
 d96:	66 1f       	adc	r22, r22
 d98:	77 1f       	adc	r23, r23
 d9a:	88 1f       	adc	r24, r24
 d9c:	91 50       	subi	r25, 0x01	; 1
 d9e:	50 40       	sbci	r21, 0x00	; 0
 da0:	a9 f7       	brne	.-22     	; 0xd8c <__mulsf3_pse+0x64>
 da2:	9e 3f       	cpi	r25, 0xFE	; 254
 da4:	51 05       	cpc	r21, r1
 da6:	80 f0       	brcs	.+32     	; 0xdc8 <__mulsf3_pse+0xa0>
 da8:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__fp_inf>
 dac:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <__fp_szero>
 db0:	5f 3f       	cpi	r21, 0xFF	; 255
 db2:	e4 f3       	brlt	.-8      	; 0xdac <__mulsf3_pse+0x84>
 db4:	98 3e       	cpi	r25, 0xE8	; 232
 db6:	d4 f3       	brlt	.-12     	; 0xdac <__mulsf3_pse+0x84>
 db8:	86 95       	lsr	r24
 dba:	77 95       	ror	r23
 dbc:	67 95       	ror	r22
 dbe:	b7 95       	ror	r27
 dc0:	f7 95       	ror	r31
 dc2:	e7 95       	ror	r30
 dc4:	9f 5f       	subi	r25, 0xFF	; 255
 dc6:	c1 f7       	brne	.-16     	; 0xdb8 <__mulsf3_pse+0x90>
 dc8:	fe 2b       	or	r31, r30
 dca:	88 0f       	add	r24, r24
 dcc:	91 1d       	adc	r25, r1
 dce:	96 95       	lsr	r25
 dd0:	87 95       	ror	r24
 dd2:	97 f9       	bld	r25, 7
 dd4:	08 95       	ret

00000dd6 <__fp_inf>:
 dd6:	97 f9       	bld	r25, 7
 dd8:	9f 67       	ori	r25, 0x7F	; 127
 dda:	80 e8       	ldi	r24, 0x80	; 128
 ddc:	70 e0       	ldi	r23, 0x00	; 0
 dde:	60 e0       	ldi	r22, 0x00	; 0
 de0:	08 95       	ret

00000de2 <__fp_nan>:
 de2:	9f ef       	ldi	r25, 0xFF	; 255
 de4:	80 ec       	ldi	r24, 0xC0	; 192
 de6:	08 95       	ret

00000de8 <__fp_pscA>:
 de8:	00 24       	eor	r0, r0
 dea:	0a 94       	dec	r0
 dec:	16 16       	cp	r1, r22
 dee:	17 06       	cpc	r1, r23
 df0:	18 06       	cpc	r1, r24
 df2:	09 06       	cpc	r0, r25
 df4:	08 95       	ret

00000df6 <__fp_pscB>:
 df6:	00 24       	eor	r0, r0
 df8:	0a 94       	dec	r0
 dfa:	12 16       	cp	r1, r18
 dfc:	13 06       	cpc	r1, r19
 dfe:	14 06       	cpc	r1, r20
 e00:	05 06       	cpc	r0, r21
 e02:	08 95       	ret

00000e04 <__fp_round>:
 e04:	09 2e       	mov	r0, r25
 e06:	03 94       	inc	r0
 e08:	00 0c       	add	r0, r0
 e0a:	11 f4       	brne	.+4      	; 0xe10 <__fp_round+0xc>
 e0c:	88 23       	and	r24, r24
 e0e:	52 f0       	brmi	.+20     	; 0xe24 <__fp_round+0x20>
 e10:	bb 0f       	add	r27, r27
 e12:	40 f4       	brcc	.+16     	; 0xe24 <__fp_round+0x20>
 e14:	bf 2b       	or	r27, r31
 e16:	11 f4       	brne	.+4      	; 0xe1c <__fp_round+0x18>
 e18:	60 ff       	sbrs	r22, 0
 e1a:	04 c0       	rjmp	.+8      	; 0xe24 <__fp_round+0x20>
 e1c:	6f 5f       	subi	r22, 0xFF	; 255
 e1e:	7f 4f       	sbci	r23, 0xFF	; 255
 e20:	8f 4f       	sbci	r24, 0xFF	; 255
 e22:	9f 4f       	sbci	r25, 0xFF	; 255
 e24:	08 95       	ret

00000e26 <__tablejump2__>:
 e26:	ee 0f       	add	r30, r30
 e28:	ff 1f       	adc	r31, r31
 e2a:	05 90       	lpm	r0, Z+
 e2c:	f4 91       	lpm	r31, Z
 e2e:	e0 2d       	mov	r30, r0
 e30:	09 94       	ijmp

00000e32 <_exit>:
 e32:	f8 94       	cli

00000e34 <__stop_program>:
 e34:	ff cf       	rjmp	.-2      	; 0xe34 <__stop_program>
